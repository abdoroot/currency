// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: proto.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CurrencyConverter_GetRate_FullMethodName = "/currencyConverter/GetRate"
)

// CurrencyConverterClient is the client API for CurrencyConverter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurrencyConverterClient interface {
	GetRate(ctx context.Context, in *CurrencyRequest, opts ...grpc.CallOption) (*CurrencyResponse, error)
}

type currencyConverterClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrencyConverterClient(cc grpc.ClientConnInterface) CurrencyConverterClient {
	return &currencyConverterClient{cc}
}

func (c *currencyConverterClient) GetRate(ctx context.Context, in *CurrencyRequest, opts ...grpc.CallOption) (*CurrencyResponse, error) {
	out := new(CurrencyResponse)
	err := c.cc.Invoke(ctx, CurrencyConverter_GetRate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurrencyConverterServer is the server API for CurrencyConverter service.
// All implementations must embed UnimplementedCurrencyConverterServer
// for forward compatibility
type CurrencyConverterServer interface {
	GetRate(context.Context, *CurrencyRequest) (*CurrencyResponse, error)
	mustEmbedUnimplementedCurrencyConverterServer()
}

// UnimplementedCurrencyConverterServer must be embedded to have forward compatible implementations.
type UnimplementedCurrencyConverterServer struct {
}

func (UnimplementedCurrencyConverterServer) GetRate(context.Context, *CurrencyRequest) (*CurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRate not implemented")
}
func (UnimplementedCurrencyConverterServer) mustEmbedUnimplementedCurrencyConverterServer() {}

// UnsafeCurrencyConverterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurrencyConverterServer will
// result in compilation errors.
type UnsafeCurrencyConverterServer interface {
	mustEmbedUnimplementedCurrencyConverterServer()
}

func RegisterCurrencyConverterServer(s grpc.ServiceRegistrar, srv CurrencyConverterServer) {
	s.RegisterService(&CurrencyConverter_ServiceDesc, srv)
}

func _CurrencyConverter_GetRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyConverterServer).GetRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrencyConverter_GetRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyConverterServer).GetRate(ctx, req.(*CurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CurrencyConverter_ServiceDesc is the grpc.ServiceDesc for CurrencyConverter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CurrencyConverter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "currencyConverter",
	HandlerType: (*CurrencyConverterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRate",
			Handler:    _CurrencyConverter_GetRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto.proto",
}
